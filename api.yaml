openapi: 3.0.0
info:
  title: TeamSoul API
  description: API всей тимбилдинговой платформы.
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Локальный сервер

# ================================
# В тэгах указываем сервис! Для структуризации
# ================================
tags:
  - name: game-plugins-service
    description: API для управления игровыми инстанциями и их списком.
  - name: auth-service
    description: API для аутентификации.
  - name: user-service
    description: API для управления пользователями.
  - name: game-room-service
    description: API для взаимодействия с игровыми комнатами.

paths:
  # ================================
  #       Сервис игровых плагинов
  # ================================
  /game-plugins-service/api/v1/games:
    get:
      summary: Получить список игр
      tags:
        - game-plugins-service
      operationId: getGamesList
      responses:
        '200':
          description: Успешный ответ, содержащий список игр
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GamesResponse'

  /game-plugins-service/api/v1/games/create:
    post:
      summary: Создать игровой инстанс
      tags:
        - game-plugins-service
      operationId: createGameInstance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGameRequest'
      responses:
        '200':
          description: Успешно создан игровой инстанс
          content:
            text/plain:
              examples:
                example:
                  value: containerId12345
        '400':
          description: Неверный запрос (ошибка клиента)
          content:
            text/plain:
              examples:
                incorrect game id:
                  value: Game id 3 not found

  /game-plugins-service/api/v1/games/stop/{containerId}:
    get:
      summary: Остановить игровой инстанс
      tags:
        - game-plugins-service
      operationId: stopGameInstance
      parameters:
        - name: containerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Успешно остановлен игровой инстанс
          content:
            text/plain:
              examples:
                example:
                  value: Success
        '400':
          description: Неверный запрос (контейнер не найден)
          content:
            text/plain:
              examples:
                example:
                  value: Container not found
  
# ================================
#       Аутентификация
# ================================
  /auth-service/api/v1/login:
    post:
      summary: Аутентификация пользователя
      description: Позволяет аутентифицировать пользователя и получить JWT токен.
      tags:
        - auth-service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '401':
          description: Неверный логин/почта или пароль

  /auth-service/api/v1/validate:
    get:
      summary: Проверка токена
      description: Проверяет токен на валидность и возвращает информацию о пользователе.
      tags:
        - auth-service
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5...
      responses:
        '200':
          description: Токен валиден, возвращается информация о пользователе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailsResponse'
        '403':
          description: Токен недействителен или истёк

# ================================
#       Сервис пользователей
# ================================
  /user-service/api/v1/register:
    post:
      summary: Регистрация нового пользователя
      description: Создает нового пользователя в системе.
      tags:
        - user-service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: Пользователь успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Пользователь с таким email или username уже существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Некорректные данные запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user-service/api/v1/users:
    get:
      summary: Получить список всех пользователей
      description: Возвращает список всех пользователей в системе.
      tags:
        - user-service
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Успешный ответ, содержащий список пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user-service/api/v1/users/{id}:
    get:
      summary: Получить пользователя по ID
      description: Возвращает информацию о пользователе по его ID.
      tags:
        - user-service
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            example: "548ef49e-119a-40b2-a0ac-f5dcfabf3d88"
      responses:
        '200':
          description: Информация о пользователе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Обновить пользователя
      description: Обновляет информацию о пользователе по его ID.
      tags:
        - user-service
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            example: "548ef49e-119a-40b2-a0ac-f5dcfabf3d88"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Пользователь успешно обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Некорректные данные запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Недостаточно прав для обновления пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Удалить пользователя
      description: Удаляет пользователя по его ID.
      tags:
        - user-service
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            example: "548ef49e-119a-40b2-a0ac-f5dcfabf3d88"
      responses:
        '200':
          description: Пользователь успешно удален
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ================================
  #       Сервис игровых комнат
  # ================================
  /game-room-service/api/v1/room/create:
    get:
      summary: создать комнату
      description: создать комнату
      tags:
        - game-room-service
      responses:
        '200':
          description: созданная комната
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedRoomDto'

  /game-room-service/api/v1/user/connect:
    post:
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5...
      summary: Юзер зашел в комнату
      description: Юзер зашел в комнату
      tags:
        - game-room-service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserConnectRequest'
      responses:
        '200':
          description: Список всех доступных игр
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConnectDto'
        '400':
          description: Юзер не найден

  /game-room-service/api/v1/user/disconnect:
    post:
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5...
      summary: Юзер покинул комнату
      description: Юзер покинул комнату
      tags:
        - game-room-service
      responses:
        '200':
          description: Юзер успешно покинул комнату
        '400':
          description: Юзер не найден

  /game-room-service/api/v1/game/get-all:
    get:
      summary: Получить игры
      description: Получить все доступные игры
      tags:
        - game-room-service
      responses:
        '200':
          description: Список всех доступных игр
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameDto'

  /game-room-service/api/v1/game/create:
    post:
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5...
      summary: Создать игру
      description: Создать игру
      tags:
        - game-room-service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGameRequestRoom'
      responses:
        '200':
          description: Список всех доступных игр
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConnectDto'

  /game-room-service/api/v1/game/status:
    post:
      summary: Обновить статус игры
      description: Обновить статус игры
      tags:
        - game-room-service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameStatusDto'
      responses:
        '200':
          description: успешно обновлен статус игры
        '400':
          description: Игра не найдена

  /game-room-service/api/v1/room/users:
    post:
      summary: Получить игроков комнаты
      description: Получить игроков комнаты
      tags:
        - game-room-service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomUsersRequest'
      responses:
        '200':
          description: Получить игроков комнаты
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGetDto'


# ================================
# В компонентах пишем сущности для запроса/ответа
# ================================
components:
  schemas:
    GamesResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Chess
        version:
          type: string
          example: 1.0.0
        description:
          type: string
          example: A classic chess game plugin
      required:
        - id
        - name
        - version
        - description

    CreateGameRequest:
      type: object
      properties:
        gameId:
          type: integer
          example: 1
        roomId:
          type: integer
          example: 123456789
      required:
        - gameId
        - roomId
    # ================================
    # Схемы сервиса игровых комнат
    # ================================
    CreateGameRequestRoom:
      type: object
      properties:
        id:
          type: integer
        roomId:
          type: integer
      required:
        - id
        - roomId

    UserConnectDto:
      type: object
      properties:
        url:
          type: string
      required:
        - url

    UserConnectRequest:
      type: object
      properties:
        roomId:
          type: string
          example: 1
      required:
        - roomId

    GameDto:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Chess
        version:
          type: string
          example: 1.0.0
        description:
          type: string
          example: A classic chess game plugin
      required:
        - id
        - name
        - version
        - description

    CreatedRoomDto:
      type: object
      properties:
        roomId:
          type: integer
          example: 1
      required:
        - roomId

    GameStatusDto:
      type: object
      properties:
        roomId:
          type: integer
          example: 1
        status:
          type: string
          example: running
      required:
        - roomId
        - status

    UserGetDto:
      type: object
      properties:
        created_at:
          type: string
        email:
          type: string
        id:
          type: integer
        login:
          type: string
        role:
          type: string
        status:
          type: string
        updated_at:
          type: string
      required:
        - id
        - login
        - email
        - role
        - status
        - created_at
        - updated_at

    RoomUsersRequest:
      type: object
      properties:
        gameId:
          type: integer
          example: 1
        roomId:
          type: integer
          example: 1
      required:
        - gameId
        - roomId

    # ================================
    # Схемы аутентификации
    # ================================
    LoginRequest:
      type: object
      properties:
        identifier:
          type: string
          description: Логин пользователя
          example: username
        password:
          type: string
          description: Пароль пользователя
          example: password123
      required:
        - login
        - password

    AuthenticationResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT токен для доступа
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      required:
        - accessToken

    UserDetailsResponse:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор пользователя
          example: 1
        login:
          type: string
          description: Логин пользователя
          example: dungeonmaster
        role:
          $ref: '#/components/schemas/UserRole'
      required:
        - id
        - login
        - role

    UserRole:
      type: string
      description: Возможные роли пользователя в системе
      enum:
        - user
        - admin
        - hr
      example: user

    UserStatus:
      type: string
      description: Возможные статусы пользователя
      enum:
        - active
        - blocked
      example: active

    # ================================
    # Схемы сервиса пользователей
    # ================================
    UserCreateRequest:
      type: object
      properties:
        username:
          type: string
          example: john_doe
          minLength: 3
          maxLength: 25
        email:
          type: string
          format: email
          example: john@example.com
          maxLength: 256
        password:
          type: string
          example: password123
          minLength: 8
          maxLength: 64
        team:
          type: string
          example: Team Alpha
          maxLength: 100
        role:
          type: string
          description: Роль пользователя
          enum:
            - user
            - admin
            - hr
          example: user
      required:
        - username
        - email
        - password
        - role

    UserUpdateRequest:
      type: object
      properties:
        username:
          type: string
          example: john_doe_updated
          minLength: 3
          maxLength: 25
        email:
          type: string
          format: email
          example: john_updated@example.com
          maxLength: 256
        password:
          type: string
          description: Пароль пользователя (опционально)
          example: newpassword123
          minLength: 8
          maxLength: 64
        team:
          type: string
          example: Team Beta
          maxLength: 100
        role:
          type: string
          description: Роль пользователя
          enum:
            - user
            - admin
            - hr
          example: admin
      required:
        - username
        - email
        - role

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "548ef49e-119a-40b2-a0ac-f5dcfabf3d88"
        username:
          type: string
          example: john_doe
        email:
          type: string
          format: email
          example: john@example.com
        team:
          type: string
          example: Team Alpha
        role:
          type: string
          description: Роль пользователя
          enum:
            - user
            - admin
            - hr
          example: user
        created_at:
          type: string
          format: date-time
          example: "2024-12-10T03:59:28.442+0700"
        updated_at:
          type: string
          format: date-time
          example: "2024-12-10T04:00:00.000+0700"
      required:
        - id
        - username
        - email
        - role
        - created_at
        - updated_at
      example:
        id: "548ef49e-119a-40b2-a0ac-f5dcfabf3d88"
        username: "john_doe"
        email: "john@example.com"
        team: "Team Alpha"
        role: "user"
        created_at: "2024-12-10T03:59:28.442+0700"
        updated_at: "2024-12-10T04:00:00.000+0700"

    SuccessResponse:
      type: object
      properties:
        msg:
          type: string
          example: Пользователь успешно удален
      required:
        - msg
      example:
        msg: "Пользователь успешно удален"

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          example: Некорректные данные запроса
      required:
        - code
        - message
      example:
        code: 400
        message: "Некорректные данные запроса"
